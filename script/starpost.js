const fs = require("fs");
const path = require("path");

const stateFile = path.join(__dirname, "starpost_state.json");

// G7 pool
const g7Pool = [
    "🌟 STAR 1", "🌟 STAR 2", "🌟 STAR 3", "🌟 STAR 4", "🌟 STAR 5",
    "🌟 GOLD ENTRY", "🌟 DIAMOND WIN", "🌟 LUCKY BONUS", "🌟 POWER PICK"
];

// Global state
let isStarPostOn = false;
let starInterval = null;
let starCountdown = 0;
let lastPostedDate = null;
let activeClaim = null;

// Generate G7 Picks
function generateG7() {
    const copy = [...g7Pool];
    const picks = [];
    for (let i = 0; i < 7; i++) {
        const index = Math.floor(Math.random() * copy.length);
        picks.push(copy.splice(index, 1)[0]);
    }
    return picks;
}

// Generate claim code
function generateClaimCode(length = 4) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < length; i++) {
        code += chars[Math.floor(Math.random() * chars.length)];
    }
    return code;
}

// Save state
function saveState() {
    try {
        fs.writeFileSync(stateFile, JSON.stringify({
            isOn: isStarPostOn,
            countdown: starCountdown,
            lastPostedDate,
            activeClaim
        }, null, 2));
    } catch (err) {
        console.error("Error saving STAR state:", err);
    }
}

// Load state
function loadState() {
    if (fs.existsSync(stateFile)) {
        try {
            const data = JSON.parse(fs.readFileSync(stateFile, "utf8"));
            isStarPostOn = data.isOn || false;
            starCountdown = data.countdown || 0;
            lastPostedDate = data.lastPostedDate || null;
            activeClaim = data.activeClaim || null;
            if (isStarPostOn) startStarPost(global.api, global.threadID);
        } catch (err) {
            console.error("Error loading STAR state:", err);
        }
    }
}

// Start autopost
function startStarPost(api, threadID) {
    if (starInterval) clearInterval(starInterval);

    starInterval = setInterval(async () => {
        try {
            const nowPH = new Date().toLocaleString("en-PH", { timeZone: "Asia/Manila" });
            const today = new Date(nowPH).toISOString().split("T")[0];

            if (lastPostedDate === today) return;

            const g7Items = generateG7();
            const basePrize = Math.floor(Math.random() * 50000) + 15000;
            const isMegaPrize = Math.random() < 0.05;
            const prize = isMegaPrize ? 45000000 : basePrize;
            const claimCode = generateClaimCode();

            const formattedTime = new Date(nowPH).toLocaleString("en-PH", {
                timeZone: "Asia/Manila",
                weekday: "short",
                year: "numeric",
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                hour12: true
            });

            let message = `💫 𝗦𝗧𝗔𝗥 𝗣𝗔𝗡𝗔𝗟𝗢 💫\n\n` +
                          `🔥 G7 PICKS:\n${g7Items.join(" | ")}\n\n` +
                          `💸 Current Prize: ₱${prize.toLocaleString("en-PH")}\n` +
                          `📝 Claim Code: ${claimCode}\n`;

            if (isMegaPrize) {
                message += `🎯 Use code ${claimCode} to claim your ₱45 MILLION PANALO! 💰🔥\n`;
            }

            message += `⭐️ Type "G7 STAR!" to participate.\n` +
                       `🔍 G7 Follow Messandra Ai to check all updated winners!\n` +
                       `See you again tomorrow!`;

            const fullMessage = `🕒 ${formattedTime} (PH Time)\n\n⏳ Countdown: ${starCountdown}\n\n${message}`;

            await api.createPost({ body: fullMessage });

            lastPostedDate = today;
            activeClaim = {
                code: claimCode,
                prize,
                claimed: false
            };
            starCountdown++;
            saveState();
            console.log(`[STAR PANALO] Auto-posted for ${today}`);
        } catch (err) {
            console.error("[STAR PANALO] Autopost Error:", err.message);
        }
    }, 5 * 60 * 1000); // every 5 minutes, check if posted today
}

// Stop posting
function stopStarPost() {
    if (starInterval) {
        clearInterval(starInterval);
        starInterval = null;
    }
}

// Module info
module.exports.config = {
    name: "starpost",
    version: "1.0.0",
    hasPermission: 0,
    usePrefix: false,
    aliases: ["sp"],
    description: "Daily autopost for STAR PANALO + Claim system",
    usages: "starpost on/off | claim <code>",
    credits: "Generated by ChatGPT",
    cooldowns: 5
};

// Command handler
module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID, senderID } = event;
    const command = args[0]?.toLowerCase();

    // Enable autopost
    if (command === "on") {
        if (isStarPostOn) {
            return api.sendMessage("✅ STAR PANALO autopost is already enabled.", threadID, messageID);
        }
        isStarPostOn = true;
        saveState();
        startStarPost(api, threadID);
        api.sendMessage("✅ STAR PANALO autopost has been enabled.", threadID, messageID);
    }

    // Disable autopost
    else if (command === "off") {
        if (!isStarPostOn) {
            return api.sendMessage("❌ STAR PANALO autopost is already disabled.", threadID, messageID);
        }
        isStarPostOn = false;
        stopStarPost();
        saveState();
        api.sendMessage("❌ STAR PANALO autopost has been disabled.", threadID, messageID);
    }

    // Claim code
    else if (command === "claim") {
        const inputCode = args[1]?.toUpperCase();
        if (!inputCode) {
            return api.sendMessage("❗ Usage: claim <CODE>", threadID, messageID);
        }

        if (!activeClaim || activeClaim.claimed) {
            return api.sendMessage("⛔ No valid or unclaimed code is currently active.", threadID, messageID);
        }

        if (inputCode !== activeClaim.code) {
            return api.sendMessage("❌ Invalid or expired claim code.", threadID, messageID);
        }

        // Mark code as claimed
        activeClaim.claimed = true;
        saveState();

        const winnerMessage = `🎉 𝗖𝗼𝗻𝗴𝗿𝗮𝘁𝘂𝗹𝗮𝘁𝗶𝗼𝗻𝘀! 🎉\n\n` +
                              `🏆 Winner of ₱${activeClaim.prize.toLocaleString("en-PH")}\n` +
                              `🔐 With Claim Code: ${activeClaim.code}\n` +
                              `👤 Claimed by: ${senderID}\n\n` +
                              `🔍 Follow Messandra Ai to check all updated winners!`;

        await api.createPost({ body: winnerMessage });

        return api.sendMessage("✅ Claim successful! 🎉 Winner has been posted.", threadID, messageID);
    }

    // Invalid usage
    else {
        return api.sendMessage("❗ Usage:\n- starpost on\n- starpost off\n- claim <CODE>", threadID, messageID);
    }
};

// Load state on start
loadState();
