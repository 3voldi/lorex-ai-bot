const axios = require('axios');

function convertToBold(text) {
  const boldMap = {
    'a': 'ùóÆ','b': 'ùóØ','c': 'ùó∞','d': 'ùó±','e': 'ùó≤','f': 'ùó≥','g': 'ùó¥','h': 'ùóµ','i': 'ùó∂','j': 'ùó∑',
    'k': 'ùó∏','l': 'ùóπ','m': 'ùó∫','n': 'ùóª','o': 'ùóº','p': 'ùóΩ','q': 'ùóæ','r': 'ùóø','s': 'ùòÄ','t': 'ùòÅ',
    'u': 'ùòÇ','v': 'ùòÉ','w': 'ùòÑ','x': 'ùòÖ','y': 'ùòÜ','z': 'ùòá',
    'A': 'ùóî','B': 'ùóï','C': 'ùóñ','D': 'ùóó','E': 'ùóò','F': 'ùóô','G': 'ùóö','H': 'ùóõ','I': 'ùóú','J': 'ùóù',
    'K': 'ùóû','L': 'ùóü','M': 'ùó†','N': 'ùó°','O': 'ùó¢','P': 'ùó£','Q': 'ùó§','R': 'ùó•','S': 'ùó¶','T': 'ùóß',
    'U': 'ùó®','V': 'ùó©','W': 'ùó™','X': 'ùó´','Y': 'ùó¨','Z': 'ùó≠',
  };
  return text.split('').map(char => boldMap[char] || char).join('');
}

function formatAriaPrompt(userQuestion) {
  return `
Please answer the following question in a structured format:

1. Quick explanation  
2. Details and examples  
3. Challenges or limitations  
4. Summary or conclusion  

Use a friendly but professional tone.  
Question: ${userQuestion}
`.trim();
}

const responseOpeners = [
  "‚ú® ùóîùó•ùóúùóî ùóîùóú ùó•ùóòùó¶ùó£ùó¢ùó°ùó¶ùóò"
];

module.exports.config = {
  name: 'aria',
  version: '1.0.0',
  hasPermission: 0,
  usePrefix: false,
  aliases: ['ariaai', 'aria'],
  description: "Ask Aria AI in English, structured format",
  usages: "aria [your question]",
  credits: 'You',
  cooldowns: 0
};

async function sendTemp(api, threadID, message) {
  return new Promise((resolve, reject) => {
    api.sendMessage(message, threadID, (err, info) => {
      if (err) return reject(err);
      resolve(info);
    });
  });
}

module.exports.run = async function({ api, event, args }) {
  const input = args.join(' ');
  const uid = event.senderID;
  const threadID = event.threadID;

  if (!input) {
    return api.sendMessage("‚ùå Please provide a question to ask Aria AI.\n\nExample: aria What is quantum computing?", threadID);
  }

  const tempMsg = await sendTemp(api, threadID, "‚è≥ Contacting Aria AI...");

  const wrappedPrompt = formatAriaPrompt(input);

  try {
    const { data } = await axios.get('https://daikyu-api.up.railway.app/api/aria-ai', {
      params: {
        query: wrappedPrompt,
        uid: uid
      },
      timeout: 10000
    });

    if (!data || typeof data.response !== 'string') {
      return api.editMessage("‚ùå Aria AI did not return a response. Please try again later.", tempMsg.messageID, threadID);
    }

    const formatted = data.response
      .replace(/\*\*(.*?)\*\*/g, (_, t) => convertToBold(t)) // bold markdown
      .replace(/##(.*?)##/g, (_, t) => convertToBold(t))     // bold headers
      .replace(/###\s*/g, '')                                 // strip markdown headers
      .replace(/\n{3,}/g, '\n\n')                             // normalize line spacing
      .trim();

    const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
    return api.editMessage(`${opener}\n\n${formatted}`, tempMsg.messageID, threadID);

  } catch (err) {
    console.error("Aria AI Error:", err);
    let errMsg = "‚ö†Ô∏è Error while retrieving response from Aria AI.";
    if (err.code === 'ECONNABORTED') {
      errMsg = "‚ö†Ô∏è Aria AI took too long to respond.";
    }
    return api.editMessage(errMsg, tempMsg.messageID, threadID);
  }
};
