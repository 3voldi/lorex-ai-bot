const fs = require("fs");
const path = require("path");

// Random name generation
const firstNames = ["Mark", "Jenna", "Kyle", "Liza", "Rico", "Ella", "James", "Faye"];
const lastNames = ["Dela Cruz", "Villanueva", "Marquez", "Ramos", "Gutierrez", "Santiago", "Navarro", "Aguilar"];

// Module configuration
module.exports.config = {
    name: "luckypost",
    version: "1.0.0",
    hasPermission: 0,
    usePrefix: false,
    aliases: ["lucky", "g7"],
    description: "Autoposts Lucky Winner to G7 Panalo every 3 minutes.",
    usages: "luckypost on/off",
    credits: "Generated by ChatGPT",
    cooldowns: 10,
    dependencies: { "fs": "", "path": "" }
};

// State file
const stateFile = path.join(__dirname, "luckypost_state.json");

// Global state
let isLuckyPostOn = false;
let luckyInterval = null;
let winnerCount = 0;

// Load state
function loadState() {
    if (fs.existsSync(stateFile)) {
        try {
            const data = JSON.parse(fs.readFileSync(stateFile, "utf8"));
            isLuckyPostOn = data.isOn || false;
            winnerCount = data.winnerCount || 0;
            if (isLuckyPostOn) startLuckyPost();
        } catch (err) {
            console.error("Error loading lucky state:", err);
        }
    }
}

// Save state
function saveState() {
    try {
        fs.writeFileSync(stateFile, JSON.stringify({ isOn: isLuckyPostOn, winnerCount }, null, 2));
    } catch (err) {
        console.error("Error saving lucky state:", err);
    }
}

// Generate lucky winner
function generateWinner() {
    const first = firstNames[Math.floor(Math.random() * firstNames.length)];
    const last = lastNames[Math.floor(Math.random() * lastNames.length)];
    const amount = Math.floor(Math.random() * 40000) + 10000; // ₱10,000 to ₱50,000
    return {
        name: `${first} ${last}`,
        amount
    };
}

// Start lucky autopost
function startLuckyPost(api, threadID) {
    if (luckyInterval) clearInterval(luckyInterval);
    luckyInterval = setInterval(async () => {
        try {
            const winner = generateWinner();

            // Philippine time
            const now = new Date();
            const phTime = now.toLocaleString("en-PH", {
                timeZone: "Asia/Manila",
                weekday: "short",
                year: "numeric",
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                hour12: true
            });

            // Message
            const message = `🎉 𝗟𝗨𝗖𝗞𝗬 𝗪𝗜𝗡𝗡𝗘𝗥 𝗔𝗟𝗘𝗥𝗧! 🎉\n\n` +
                `👑 Name: ${winner.name}\n` +
                `💰 Prize: ₱${winner.amount.toLocaleString()} G7 Panalo!\n\n` +
                `🕒 ${phTime} (Philippine Time)\n` +
                `🎊 Congratulations! You are today’s lucky G7 winner!\n\n` +
                `🧧 Join G7 now and you could be next!\n` +
                `#G7LuckyWinner #PanaloSaG7 #JackpotSaG7`;

            const postData = { body: message };
            const url = await api.createPost(postData);
            console.log(`G7 lucky post: ${url || 'Posted successfully'}`);

            winnerCount++;
            saveState();
        } catch (error) {
            console.error("Lucky autopost error:", error);
        }
    }, 3 * 60 * 1000); // 3 minutes
}

// Stop autopost
function stopLuckyPost() {
    if (luckyInterval) {
        clearInterval(luckyInterval);
        luckyInterval = null;
    }
}

// Command handler
module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;
    const command = args[0]?.toLowerCase();

    if (command === "on") {
        if (isLuckyPostOn) {
            return api.sendMessage("✅ Lucky G7 autopost is already running.", threadID, messageID);
        }
        isLuckyPostOn = true;
        saveState();
        startLuckyPost(api, threadID);
        api.sendMessage("✅ Lucky G7 autopost started. Posting every 3 minutes.", threadID, messageID);
    } else if (command === "off") {
        if (!isLuckyPostOn) {
            return api.sendMessage("❌ Lucky G7 autopost is already stopped.", threadID, messageID);
        }
        isLuckyPostOn = false;
        saveState();
        stopLuckyPost();
        api.sendMessage("❌ Lucky G7 autopost stopped.", threadID, messageID);
    } else {
        api.sendMessage("❗ Usage: luckypost on/off", threadID, messageID);
    }
};

// Load on startup
loadState();
